{
  "version": 3,
  "sources": ["../esotope.js"],
  "sourcesContent": ["// -------------------------------------------------------------\n// WARNING: this file is used by both the client and the server.\n// Do not use any browser or node-specific API!\n// -------------------------------------------------------------\n\n/*\n Copyright (C) 2014 Ivan Nikulin <ifaaan@gmail.com>\n Copyright (C) 2012-2014 Yusuke Suzuki <utatane.tea@gmail.com>\n Copyright (C) 2012-2013 Michael Ficarra <escodegen.copyright@michael.ficarra.me>\n Copyright (C) 2012-2013 Mathias Bynens <mathias@qiwi.be>\n Copyright (C) 2013 Irakli Gozalishvili <rfobic@gmail.com>\n Copyright (C) 2012 Robert Gust-Bardon <donate@robert.gust-bardon.org>\n Copyright (C) 2012 John Freeman <jfreeman08@gmail.com>\n Copyright (C) 2011-2012 Ariya Hidayat <ariya.hidayat@gmail.com>\n Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>\n Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>\n Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n * Redistributions of source code must retain the above copyright\n notice, this list of conditions and the following disclaimer.\n * Redistributions in binary form must reproduce the above copyright\n notice, this list of conditions and the following disclaimer in the\n documentation and/or other materials provided with the distribution.\n\n THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n'use strict';\n\nvar isArray,\n    json,\n    renumber,\n    hexadecimal,\n    quotes,\n    escapeless,\n    parentheses,\n    semicolons,\n    safeConcatenation,\n    directive,\n    extra,\n    parse;\n\nvar Syntax = {\n    AssignmentExpression:     'AssignmentExpression',\n    AssignmentPattern:        'AssignmentPattern',\n    ArrayExpression:          'ArrayExpression',\n    ArrayPattern:             'ArrayPattern',\n    ArrowFunctionExpression:  'ArrowFunctionExpression',\n    AwaitExpression:          'AwaitExpression',\n    BlockStatement:           'BlockStatement',\n    BinaryExpression:         'BinaryExpression',\n    BreakStatement:           'BreakStatement',\n    CallExpression:           'CallExpression',\n    CatchClause:              'CatchClause',\n    ClassBody:                'ClassBody',\n    ClassDeclaration:         'ClassDeclaration',\n    ClassExpression:          'ClassExpression',\n    ComprehensionBlock:       'ComprehensionBlock',\n    ComprehensionExpression:  'ComprehensionExpression',\n    ConditionalExpression:    'ConditionalExpression',\n    ContinueStatement:        'ContinueStatement',\n    DirectiveStatement:       'DirectiveStatement',\n    DoWhileStatement:         'DoWhileStatement',\n    DebuggerStatement:        'DebuggerStatement',\n    EmptyStatement:           'EmptyStatement',\n    ExportAllDeclaration:     'ExportAllDeclaration',\n    ExportBatchSpecifier:     'ExportBatchSpecifier',\n    ExportDeclaration:        'ExportDeclaration',\n    ExportNamedDeclaration:   'ExportNamedDeclaration',\n    ExportSpecifier:          'ExportSpecifier',\n    ExpressionStatement:      'ExpressionStatement',\n    ForStatement:             'ForStatement',\n    ForInStatement:           'ForInStatement',\n    ForOfStatement:           'ForOfStatement',\n    FunctionDeclaration:      'FunctionDeclaration',\n    FunctionExpression:       'FunctionExpression',\n    GeneratorExpression:      'GeneratorExpression',\n    Identifier:               'Identifier',\n    IfStatement:              'IfStatement',\n    ImportExpression:         'ImportExpression',\n    ImportSpecifier:          'ImportSpecifier',\n    ImportDeclaration:        'ImportDeclaration',\n    ChainExpression:          'ChainExpression',\n    Literal:                  'Literal',\n    LabeledStatement:         'LabeledStatement',\n    LogicalExpression:        'LogicalExpression',\n    MemberExpression:         'MemberExpression',\n    MetaProperty:             'MetaProperty',\n    MethodDefinition:         'MethodDefinition',\n    ModuleDeclaration:        'ModuleDeclaration',\n    NewExpression:            'NewExpression',\n    ObjectExpression:         'ObjectExpression',\n    ObjectPattern:            'ObjectPattern',\n    PrivateIdentifier:        'PrivateIdentifier',\n    Program:                  'Program',\n    Property:                 'Property',\n    PropertyDefinition:       'PropertyDefinition',\n    RestElement:              'RestElement',\n    ReturnStatement:          'ReturnStatement',\n    SequenceExpression:       'SequenceExpression',\n    SpreadElement:            'SpreadElement',\n    Super:                    'Super',\n    SwitchStatement:          'SwitchStatement',\n    SwitchCase:               'SwitchCase',\n    TaggedTemplateExpression: 'TaggedTemplateExpression',\n    TemplateElement:          'TemplateElement',\n    TemplateLiteral:          'TemplateLiteral',\n    ThisExpression:           'ThisExpression',\n    ThrowStatement:           'ThrowStatement',\n    TryStatement:             'TryStatement',\n    UnaryExpression:          'UnaryExpression',\n    UpdateExpression:         'UpdateExpression',\n    VariableDeclaration:      'VariableDeclaration',\n    VariableDeclarator:       'VariableDeclarator',\n    WhileStatement:           'WhileStatement',\n    WithStatement:            'WithStatement',\n    YieldExpression:          'YieldExpression'\n};\n\nexports.Syntax = Syntax;\n\nvar Precedence = {\n    Sequence:         0,\n    Yield:            1,\n    Assignment:       1,\n    Conditional:      2,\n    ArrowFunction:    2,\n    Coalesce:         3,\n    LogicalOR:        3,\n    LogicalAND:       4,\n    BitwiseOR:        5,\n    BitwiseXOR:       6,\n    BitwiseAND:       7,\n    Equality:         8,\n    Relational:       9,\n    BitwiseSHIFT:     10,\n    Additive:         11,\n    Multiplicative:   12,\n    Unary:            13,\n    Exponentiation:   14,\n    Postfix:          14,\n    Await:            14,\n    Call:             15,\n    New:              16,\n    TaggedTemplate:   17,\n    OptionalChaining: 17,\n    Member:           18,\n    Primary:          19\n};\n\nvar BinaryPrecedence = {\n    '||':         Precedence.LogicalOR,\n    '&&':         Precedence.LogicalAND,\n    '|':          Precedence.BitwiseOR,\n    '^':          Precedence.BitwiseXOR,\n    '&':          Precedence.BitwiseAND,\n    '==':         Precedence.Equality,\n    '!=':         Precedence.Equality,\n    '===':        Precedence.Equality,\n    '!==':        Precedence.Equality,\n    'is':         Precedence.Equality,\n    'isnt':       Precedence.Equality,\n    '<':          Precedence.Relational,\n    '>':          Precedence.Relational,\n    '<=':         Precedence.Relational,\n    '>=':         Precedence.Relational,\n    'in':         Precedence.Relational,\n    'instanceof': Precedence.Relational,\n    '<<':         Precedence.BitwiseSHIFT,\n    '>>':         Precedence.BitwiseSHIFT,\n    '>>>':        Precedence.BitwiseSHIFT,\n    '+':          Precedence.Additive,\n    '-':          Precedence.Additive,\n    '*':          Precedence.Multiplicative,\n    '%':          Precedence.Multiplicative,\n    '/':          Precedence.Multiplicative,\n    '??':         Precedence.Coalesce,\n    '**':         Precedence.Exponentiation\n};\n\nfunction getDefaultOptions () {\n    // default options\n    return {\n        indent:    null,\n        base:      null,\n        parse:     null,\n        format:    {\n            indent:            {\n                style: '    ',\n                base:  0\n            },\n            newline:           '\\n',\n            space:             ' ',\n            json:              false,\n            renumber:          false,\n            hexadecimal:       false,\n            quotes:            'single',\n            escapeless:        false,\n            compact:           false,\n            parentheses:       true,\n            semicolons:        true,\n            safeConcatenation: false\n        },\n        directive: false,\n        raw:       true,\n        verbatim:  null\n    };\n}\n\n//-------------------------------------------------===------------------------------------------------------\n//                                            Lexical utils\n//-------------------------------------------------===------------------------------------------------------\n\n//Const\nvar NON_ASCII_WHITESPACES = [\n    0x1680, 0x180E, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005,\n    0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000,\n    0xFEFF\n];\n\n//Regular expressions\nvar NON_ASCII_IDENTIFIER_CHARACTERS_REGEXP = new RegExp(\n    '[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376' +\n    '\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-' +\n    '\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA' +\n    '\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-' +\n    '\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0\\u08A2-\\u08AC\\u08E4-\\u08FE\\u0900-' +\n    '\\u0963\\u0966-\\u096F\\u0971-\\u0977\\u0979-\\u097F\\u0981-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-' +\n    '\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-' +\n    '\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38' +\n    '\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83' +\n    '\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9' +\n    '\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-' +\n    '\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-' +\n    '\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E' +\n    '\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-' +\n    '\\u0BEF\\u0C01-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D-\\u0C44\\u0C46-' +\n    '\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58\\u0C59\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C82\\u0C83\\u0C85-\\u0C8C\\u0C8E-' +\n    '\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE' +\n    '\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D02\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44' +\n    '\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D60-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-' +\n    '\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DF2\\u0DF3\\u0E01-\\u0E3A' +\n    '\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-' +\n    '\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9' +\n    '\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84' +\n    '\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-' +\n    '\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5' +\n    '\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1380-' +\n    '\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F0\\u1700-\\u170C\\u170E-' +\n    '\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD' +\n    '\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1920-\\u192B' +\n    '\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19D9\\u1A00-\\u1A1B\\u1A20-\\u1A5E' +\n    '\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-' +\n    '\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1D00-\\u1DE6\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-' +\n    '\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-' +\n    '\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F' +\n    '\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115' +\n    '\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188' +\n    '\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-' +\n    '\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-' +\n    '\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099\\u309A' +\n    '\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5' +\n    '\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA697' +\n    '\\uA69F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA827\\uA840-\\uA873' +\n    '\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-' +\n    '\\uA9D9\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A\\uAA7B\\uAA80-\\uAAC2\\uAADB-\\uAADD\\uAAE0-' +\n    '\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABEA\\uABEC' +\n    '\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-' +\n    '\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D' +\n    '\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE26\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74' +\n    '\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-' +\n    '\\uFFD7\\uFFDA-\\uFFDC]'\n);\n\n\n//Methods\nfunction isIdentifierCh (cp) {\n    if (cp < 0x80) {\n        return cp >= 97 && cp <= 122 ||      // a..z\n               cp >= 65 && cp <= 90 ||       // A..Z\n               cp >= 48 && cp <= 57 ||       // 0..9\n               cp === 36 || cp === 95 ||     // $ (dollar) and _ (underscore)\n               cp === 92;                    // \\ (backslash)\n    }\n\n    var ch = String.fromCharCode(cp);\n\n    return NON_ASCII_IDENTIFIER_CHARACTERS_REGEXP.test(ch);\n}\n\nfunction isLineTerminator (cp) {\n    return cp === 0x0A || cp === 0x0D || cp === 0x2028 || cp === 0x2029;\n}\n\nfunction isWhitespace (cp) {\n    return cp === 0x20 || cp === 0x09 || isLineTerminator(cp) || cp === 0x0B || cp === 0x0C || cp === 0xA0 ||\n           (cp >= 0x1680 && NON_ASCII_WHITESPACES.indexOf(cp) >= 0);\n}\n\nfunction isDecimalDigit (cp) {\n    return cp >= 48 && cp <= 57;\n}\n\nfunction stringRepeat (str, num) {\n    var result = '';\n\n    for (num |= 0; num > 0; num >>>= 1, str += str) {\n        if (num & 1) {\n            result += str;\n        }\n    }\n\n    return result;\n}\n\nisArray = Array.isArray;\nif (!isArray) {\n    isArray = function isArray (array) {\n        return Object.prototype.toString.call(array) === '[object Array]';\n    };\n}\n\n\nfunction updateDeeply (target, override) {\n    var key, val;\n\n    function isHashObject (target) {\n        return typeof target === 'object' && target instanceof Object && !(target instanceof RegExp);\n    }\n\n    for (key in override) {\n        if (override.hasOwnProperty(key)) {\n            val = override[key];\n            if (isHashObject(val)) {\n                if (isHashObject(target[key])) {\n                    updateDeeply(target[key], val);\n                }\n                else {\n                    target[key] = updateDeeply({}, val);\n                }\n            }\n            else {\n                target[key] = val;\n            }\n        }\n    }\n    return target;\n}\n\nfunction generateNumber (value) {\n    var result, point, temp, exponent, pos;\n\n    if (value === 1 / 0) {\n        return json ? 'null' : renumber ? '1e400' : '1e+400';\n    }\n\n    result = '' + value;\n    if (!renumber || result.length < 3) {\n        return result;\n    }\n\n    point = result.indexOf('.');\n    //NOTE: 0x30 == '0'\n    if (!json && result.charCodeAt(0) === 0x30 && point === 1) {\n        point  = 0;\n        result = result.slice(1);\n    }\n    temp     = result;\n    result   = result.replace('e+', 'e');\n    exponent = 0;\n    if ((pos = temp.indexOf('e')) > 0) {\n        exponent = +temp.slice(pos + 1);\n        temp     = temp.slice(0, pos);\n    }\n    if (point >= 0) {\n        exponent -= temp.length - point - 1;\n        temp = +(temp.slice(0, point) + temp.slice(point + 1)) + '';\n    }\n    pos = 0;\n\n    //NOTE: 0x30 == '0'\n    while (temp.charCodeAt(temp.length + pos - 1) === 0x30) {\n        --pos;\n    }\n    if (pos !== 0) {\n        exponent -= pos;\n        temp = temp.slice(0, pos);\n    }\n    if (exponent !== 0) {\n        temp += 'e' + exponent;\n    }\n    if ((temp.length < result.length ||\n         (hexadecimal && value > 1e12 && Math.floor(value) === value &&\n          (temp = '0x' + value.toString(16)).length\n          < result.length)) &&\n        +temp === value) {\n        result = temp;\n    }\n\n    return result;\n}\n\n// Generate valid RegExp expression.\n// This function is based on https://github.com/Constellation/iv Engine\n\nfunction escapeRegExpCharacter (ch, previousIsBackslash) {\n    // not handling '\\' and handling \\u2028 or \\u2029 to unicode escape sequence\n    if ((ch & ~1) === 0x2028) {\n        return (previousIsBackslash ? 'u' : '\\\\u') + ((ch === 0x2028) ? '2028' : '2029');\n    }\n    else if (ch === 10 || ch === 13) {  // \\n, \\r\n        return (previousIsBackslash ? '' : '\\\\') + ((ch === 10) ? 'n' : 'r');\n    }\n    return String.fromCharCode(ch);\n}\n\nfunction generateRegExp (reg) {\n    var match, result, flags, i, iz, ch, characterInBrack, previousIsBackslash;\n\n    result = reg.toString();\n\n    if (reg.source) {\n        // extract flag from toString result\n        match = result.match(/\\/([^/]*)$/);\n        if (!match) {\n            return result;\n        }\n\n        flags  = match[1];\n        result = '';\n\n        characterInBrack    = false;\n        previousIsBackslash = false;\n        for (i = 0, iz = reg.source.length; i < iz; ++i) {\n            ch = reg.source.charCodeAt(i);\n\n            if (!previousIsBackslash) {\n                if (characterInBrack) {\n                    if (ch === 93) {  // ]\n                        characterInBrack = false;\n                    }\n                }\n                else {\n                    if (ch === 47) {  // /\n                        result += '\\\\';\n                    }\n                    else if (ch === 91) {  // [\n                        characterInBrack = true;\n                    }\n                }\n                result += escapeRegExpCharacter(ch, previousIsBackslash);\n                previousIsBackslash = ch === 92;  // \\\n            }\n            else {\n                // if new RegExp(\"\\\\\\n') is provided, create /\\n/\n                result += escapeRegExpCharacter(ch, previousIsBackslash);\n                // prevent like /\\\\[/]/\n                previousIsBackslash = false;\n            }\n        }\n\n        return '/' + result + '/' + flags;\n    }\n\n    return result;\n}\n\nfunction escapeAllowedCharacter (code, next) {\n    var hex, result = '\\\\';\n\n    switch (code) {\n        case 0x08:          // \\b\n            result += 'b';\n            break;\n        case 0x0C:          // \\f\n            result += 'f';\n            break;\n        case 0x09:          // \\t\n            result += 't';\n            break;\n        default:\n            hex = code.toString(16).toUpperCase();\n            if (json || code > 0xFF) {\n                result += 'u' + '0000'.slice(hex.length) + hex;\n            }\n\n            else if (code === 0x0000 && !isDecimalDigit(next)) {\n                result += '0';\n            }\n\n            else if (code === 0x000B) {     // \\v\n                result += 'x0B';\n            }\n\n            else {\n                result += 'x' + '00'.slice(hex.length) + hex;\n            }\n            break;\n    }\n\n    return result;\n}\n\nfunction escapeDisallowedCharacter (code) {\n    var result = '\\\\';\n    switch (code) {\n        case 0x5C       // \\\n        :\n            result += '\\\\';\n            break;\n        case 0x0A       // \\n\n        :\n            result += 'n';\n            break;\n        case 0x0D       // \\r\n        :\n            result += 'r';\n            break;\n        case 0x2028:\n            result += 'u2028';\n            break;\n        case 0x2029:\n            result += 'u2029';\n            break;\n    }\n\n    return result;\n}\n\nfunction escapeDirective (str) {\n    var i, iz, code, quote;\n\n    quote = quotes === 'double' ? '\"' : '\\'';\n    for (i = 0, iz = str.length; i < iz; ++i) {\n        code = str.charCodeAt(i);\n        if (code === 0x27) {            // '\n            quote = '\"';\n            break;\n        }\n        else if (code === 0x22) {     // \"\n            quote = '\\'';\n            break;\n        }\n        else if (code === 0x5C) {     // \\\n            ++i;\n        }\n    }\n\n    return quote + str + quote;\n}\n\nfunction escapeString (str) {\n    var result = '', i, len, code, singleQuotes = 0, doubleQuotes = 0, single, quote;\n    //TODO http://jsperf.com/character-counting/8\n    for (i = 0, len = str.length; i < len; ++i) {\n        code = str.charCodeAt(i);\n        if (code === 0x27) {           // '\n            ++singleQuotes;\n        }\n        else if (code === 0x22) { // \"\n            ++doubleQuotes;\n        }\n        else if (code === 0x2F && json) { // /\n            result += '\\\\';\n        }\n        else if (isLineTerminator(code) || code === 0x5C) { // \\\n            result += escapeDisallowedCharacter(code);\n            continue;\n        }\n        else if ((json && code < 0x20) ||                                     // SP\n                 !(json || escapeless || (code >= 0x20 && code <= 0x7E))) {   // SP, ~\n            result += escapeAllowedCharacter(code, str.charCodeAt(i + 1));\n            continue;\n        }\n        result += String.fromCharCode(code);\n    }\n\n    single = !(quotes === 'double' || (quotes === 'auto' && doubleQuotes < singleQuotes));\n    quote  = single ? '\\'' : '\"';\n\n    if (!(single ? singleQuotes : doubleQuotes)) {\n        return quote + result + quote;\n    }\n\n    str    = result;\n    result = quote;\n\n    for (i = 0, len = str.length; i < len; ++i) {\n        code = str.charCodeAt(i);\n        if ((code === 0x27 && single) || (code === 0x22 && !single)) {    // ', \"\n            result += '\\\\';\n        }\n        result += String.fromCharCode(code);\n    }\n\n    return result + quote;\n}\n\n\nfunction join (l, r) {\n    if (!l.length)\n        return r;\n\n    if (!r.length)\n        return l;\n\n    var lCp = l.charCodeAt(l.length - 1),\n        rCp = r.charCodeAt(0);\n\n    if (isIdentifierCh(lCp) && isIdentifierCh(rCp) ||\n        lCp === rCp && (lCp === 0x2B || lCp === 0x2D) ||   // + +, - -\n        lCp === 0x2F && rCp === 0x69) {                    // /re/ instanceof foo\n        return l + _.space + r;\n    }\n\n    else if (isWhitespace(lCp) || isWhitespace(rCp))\n        return l + r;\n\n    return l + _.optSpace + r;\n}\n\nfunction shiftIndent () {\n    var prevIndent = _.indent;\n\n    _.indent += _.indentUnit;\n    return prevIndent;\n}\n\nfunction adoptionPrefix ($stmt) {\n    if ($stmt.type === Syntax.BlockStatement)\n        return _.optSpace;\n\n    if ($stmt.type === Syntax.EmptyStatement)\n        return '';\n\n    return _.newline + _.indent + _.indentUnit;\n}\n\nfunction adoptionSuffix ($stmt) {\n    if ($stmt.type === Syntax.BlockStatement)\n        return _.optSpace;\n\n    return _.newline + _.indent;\n}\n\n//Subentities generators\nfunction generateVerbatim ($expr, settings) {\n    var verbatim     = $expr[extra.verbatim],\n        strVerbatim  = typeof verbatim === 'string',\n        precedence   = !strVerbatim &&\n                       verbatim.precedence !== void 0 ? verbatim.precedence : Precedence.Sequence,\n        parenthesize = precedence < settings.precedence,\n        content      = strVerbatim ? verbatim : verbatim.content,\n        chunks       = content.split(/\\r\\n|\\n/),\n        chunkCount   = chunks.length;\n\n    if (parenthesize)\n        _.js += '(';\n\n    _.js += chunks[0];\n\n    for (var i = 1; i < chunkCount; i++)\n        _.js += _.newline + _.indent + chunks[i];\n\n    if (parenthesize)\n        _.js += ')';\n}\n\nfunction generateFunctionParams ($node) {\n    var $params                     = $node.params,\n        paramCount                  = $params.length,\n        lastParamIdx                = paramCount - 1,\n        arrowFuncWithoutParentheses = $node.type === Syntax.ArrowFunctionExpression && paramCount === 1 &&\n                                      $params[0].type === Syntax.Identifier;\n\n    //NOTE: arg => { } case\n    if (arrowFuncWithoutParentheses)\n        _.js += $params[0].name;\n\n    else {\n        _.js += '(';\n\n        for (var i = 0; i < paramCount; ++i) {\n            var $param = $params[i];\n\n            if ($params[i].type === Syntax.Identifier)\n                _.js += $param.name;\n\n            else\n                ExprGen[$param.type]($param, Preset.e4);\n\n            if (i !== lastParamIdx)\n                _.js += ',' + _.optSpace;\n        }\n\n        _.js += ')';\n    }\n}\n\nfunction generateFunctionBody ($node) {\n    var $body = $node.body;\n\n    generateFunctionParams($node);\n\n    if ($node.type === Syntax.ArrowFunctionExpression)\n        _.js += _.optSpace + '=>';\n\n    if ($node.expression) {\n        _.js += _.optSpace;\n\n        var exprJs = exprToJs($body, Preset.e4);\n\n        if (exprJs.charAt(0) === '{')\n            exprJs = '(' + exprJs + ')';\n\n        _.js += exprJs;\n    }\n\n    else {\n        _.js += adoptionPrefix($body);\n        StmtGen[$body.type]($body, Preset.s8);\n    }\n}\n\n\n//-------------------------------------------------===------------------------------------------------------\n//                                Syntactic entities generation presets\n//-------------------------------------------------===------------------------------------------------------\n\nvar Preset = {\n    e1: function (allowIn) {\n        return {\n            precedence:              Precedence.Assignment,\n            allowIn:                 allowIn,\n            allowCall:               true,\n            allowUnparenthesizedNew: true\n        };\n    },\n\n    e2: function (allowIn) {\n        return {\n            precedence:              Precedence.LogicalOR,\n            allowIn:                 allowIn,\n            allowCall:               true,\n            allowUnparenthesizedNew: true\n        };\n    },\n\n    e3: {\n        precedence:              Precedence.Call,\n        allowIn:                 true,\n        allowCall:               true,\n        allowUnparenthesizedNew: false\n    },\n\n    e4: {\n        precedence:              Precedence.Assignment,\n        allowIn:                 true,\n        allowCall:               true,\n        allowUnparenthesizedNew: true\n    },\n\n    e5: {\n        precedence:              Precedence.Sequence,\n        allowIn:                 true,\n        allowCall:               true,\n        allowUnparenthesizedNew: true\n    },\n\n    e6: function (allowUnparenthesizedNew) {\n        return {\n            precedence:              Precedence.New,\n            allowIn:                 true,\n            allowCall:               false,\n            allowUnparenthesizedNew: allowUnparenthesizedNew\n        };\n    },\n\n    e7: {\n        precedence:              Precedence.Unary,\n        allowIn:                 true,\n        allowCall:               true,\n        allowUnparenthesizedNew: true\n    },\n\n    e8: {\n        precedence:              Precedence.Postfix,\n        allowIn:                 true,\n        allowCall:               true,\n        allowUnparenthesizedNew: true\n    },\n\n    e9: {\n        precedence:              void 0,\n        allowIn:                 true,\n        allowCall:               true,\n        allowUnparenthesizedNew: true\n    },\n\n    e10: {\n        precedence:              Precedence.Call,\n        allowIn:                 true,\n        allowCall:               true,\n        allowUnparenthesizedNew: true\n    },\n\n    e11: function (allowCall) {\n        return {\n            precedence:              Precedence.Call,\n            allowIn:                 true,\n            allowCall:               allowCall,\n            allowUnparenthesizedNew: false\n        };\n    },\n\n    e12: {\n        precedence:              Precedence.Primary,\n        allowIn:                 false,\n        allowCall:               false,\n        allowUnparenthesizedNew: true\n    },\n\n    e13: {\n        precedence:              Precedence.Primary,\n        allowIn:                 true,\n        allowCall:               true,\n        allowUnparenthesizedNew: true\n    },\n\n\n    e14: {\n        precedence:              Precedence.Sequence,\n        allowIn:                 false,\n        allowCall:               true,\n        allowUnparenthesizedNew: true\n    },\n\n\n    e15: function (allowCall) {\n        return {\n            precedence:              Precedence.Sequence,\n            allowIn:                 true,\n            allowCall:               allowCall,\n            allowUnparenthesizedNew: true\n        };\n    },\n\n    e16: function (precedence, allowIn) {\n        return {\n            precedence:              precedence,\n            allowIn:                 allowIn,\n            allowCall:               true,\n            allowUnparenthesizedNew: true\n        };\n    },\n\n    e17: function (allowIn) {\n        return {\n            precedence:              Precedence.Call,\n            allowIn:                 allowIn,\n            allowCall:               true,\n            allowUnparenthesizedNew: true\n        }\n    },\n\n    e18: function (allowIn) {\n        return {\n            precedence:              Precedence.Assignment,\n            allowIn:                 allowIn,\n            allowCall:               true,\n            allowUnparenthesizedNew: true\n        }\n    },\n\n    e19: {\n        precedence:        Precedence.Sequence,\n        allowIn:           true,\n        allowCall:         true,\n        semicolonOptional: false\n    },\n\n    e20: {\n        precedence: Precedence.Await,\n        allowCall:  true\n    },\n\n    s1: function (functionBody, semicolonOptional) {\n        return {\n            allowIn:           true,\n            functionBody:      false,\n            directiveContext:  functionBody,\n            semicolonOptional: semicolonOptional\n        };\n    },\n\n    s2: {\n        allowIn:           true,\n        functionBody:      false,\n        directiveContext:  false,\n        semicolonOptional: true\n    },\n\n    s3: function (allowIn) {\n        return {\n            allowIn:           allowIn,\n            functionBody:      false,\n            directiveContext:  false,\n            semicolonOptional: false\n        };\n    },\n\n    s4: function (semicolonOptional) {\n        return {\n            allowIn:           true,\n            functionBody:      false,\n            directiveContext:  false,\n            semicolonOptional: semicolonOptional\n        };\n    },\n\n    s5: function (semicolonOptional) {\n        return {\n            allowIn:           true,\n            functionBody:      false,\n            directiveContext:  true,\n            semicolonOptional: semicolonOptional,\n        };\n    },\n\n    s6: {\n        allowIn:           false,\n        functionBody:      false,\n        directiveContext:  false,\n        semicolonOptional: false\n    },\n\n    s7: {\n        allowIn:           true,\n        functionBody:      false,\n        directiveContext:  false,\n        semicolonOptional: false\n    },\n\n    s8: {\n        allowIn:           true,\n        functionBody:      true,\n        directiveContext:  false,\n        semicolonOptional: false\n    }\n};\n\n\n//-------------------------------------------------===-------------------------------------------------------\n//                                             Expressions\n//-------------------------------------------------===-------------------------------------------------------\n\n//Regular expressions\nvar FLOATING_OR_OCTAL_REGEXP  = /[.eExX]|^0[0-9]+/,\n    LAST_DECIMAL_DIGIT_REGEXP = /[0-9]$/;\n\n\n//Common expression generators\nfunction isLogicalExpression(node) {\n    if (!node)\n        return false;\n\n    return node.type === Syntax.LogicalExpression;\n}\n\nfunction needParensForLogicalExpression (node, parent) {\n    switch (node.operator) {\n        case \"||\":\n            if (!isLogicalExpression(parent)) return false;\n            return parent.operator === \"??\" || parent.operator === \"&&\";\n\n        case \"&&\":\n            return isLogicalExpression(parent, {\n                operator: \"??\"\n            });\n\n        case \"??\":\n            return isLogicalExpression(parent) && parent.operator !== \"??\";\n    }\n}\n\nfunction generateLogicalOrBinaryExpression ($expr, settings, $parent) {\n    var op                 = $expr.operator,\n        precedence         = BinaryPrecedence[$expr.operator],\n        parenthesize       = precedence < settings.precedence,\n        allowIn            = settings.allowIn || parenthesize,\n        operandGenSettings = Preset.e16(precedence, allowIn),\n        exprJs             = exprToJs($expr.left, operandGenSettings, $expr);\n\n    parenthesize |= op === 'in' && !allowIn;\n\n    var needParens = needParensForLogicalExpression($expr, $parent);\n\n    if (parenthesize || needParens)\n        _.js += '(';\n\n    // 0x2F = '/'\n    if (exprJs.charCodeAt(exprJs.length - 1) === 0x2F && isIdentifierCh(op.charCodeAt(0)))\n        exprJs = exprJs + _.space + op;\n\n    else\n        exprJs = join(exprJs, op);\n\n    operandGenSettings.precedence++;\n\n    var rightJs = exprToJs($expr.right, operandGenSettings, $expr);\n\n    //NOTE: If '/' concats with '/' or `<` concats with `!--`, it is interpreted as comment start\n    if (op === '/' && rightJs.charAt(0) === '/' || op.slice(-1) === '<' && rightJs.slice(0, 3) === '!--')\n        exprJs += _.space + rightJs;\n\n    else\n        exprJs = join(exprJs, rightJs);\n\n    _.js += exprJs;\n\n    if (parenthesize || needParens)\n        _.js += ')';\n}\n\nfunction generateArrayPatternOrExpression ($expr) {\n    var $elems    = $expr.elements,\n        elemCount = $elems.length;\n\n    if (elemCount) {\n        var lastElemIdx = elemCount - 1,\n            multiline   = elemCount > 1,\n            prevIndent  = shiftIndent(),\n            itemPrefix  = _.newline + _.indent;\n\n        _.js += '[';\n\n        for (var i = 0; i < elemCount; i++) {\n            var $elem = $elems[i];\n\n            if (multiline)\n                _.js += itemPrefix;\n\n            if ($elem)\n                ExprGen[$elem.type]($elem, Preset.e4);\n\n            if (i !== lastElemIdx || !$elem)\n                _.js += ',';\n        }\n\n        _.indent = prevIndent;\n\n        if (multiline)\n            _.js += _.newline + _.indent;\n\n        _.js += ']';\n    }\n\n    else\n        _.js += '[]';\n}\n\nfunction generateGeneratorOrComprehensionExpression ($expr) {\n    //NOTE: GeneratorExpression should be parenthesized with (...), ComprehensionExpression with [...]\n    var $blocks     = $expr.blocks,\n        $filter     = $expr.filter,\n        isGenerator = $expr.type === Syntax.GeneratorExpression,\n        exprJs      = isGenerator ? '(' : '[',\n        bodyJs      = exprToJs($expr.body, Preset.e4);\n\n    if ($blocks) {\n        var prevIndent = shiftIndent(),\n            blockCount = $blocks.length;\n\n        for (var i = 0; i < blockCount; ++i) {\n            var blockJs = exprToJs($blocks[i], Preset.e5);\n\n            exprJs = i > 0 ? join(exprJs, blockJs) : (exprJs + blockJs);\n        }\n\n        _.indent = prevIndent;\n    }\n\n    if ($filter) {\n        var filterJs = exprToJs($filter, Preset.e5);\n\n        exprJs = join(exprJs, 'if' + _.optSpace);\n        exprJs = join(exprJs, '(' + filterJs + ')');\n    }\n\n    exprJs = join(exprJs, bodyJs);\n    exprJs += isGenerator ? ')' : ']';\n\n    _.js += exprJs;\n}\n\n\n//Expression raw generator dictionary\nvar ExprRawGen = {\n    SequenceExpression: function generateSequenceExpression ($expr, settings) {\n        var $children       = $expr.expressions,\n            childrenCount   = $children.length,\n            lastChildIdx    = childrenCount - 1,\n            parenthesize    = Precedence.Sequence < settings.precedence,\n            exprGenSettings = Preset.e1(settings.allowIn || parenthesize);\n\n        if (parenthesize)\n            _.js += '(';\n\n        for (var i = 0; i < childrenCount; i++) {\n            var $child = $children[i];\n\n            ExprGen[$child.type]($child, exprGenSettings);\n\n            if (i !== lastChildIdx)\n                _.js += ',' + _.optSpace;\n        }\n\n        if (parenthesize)\n            _.js += ')';\n    },\n\n    AssignmentExpression: function generateAssignmentExpression ($expr, settings) {\n        var $left        = $expr.left,\n            $right       = $expr.right,\n            parenthesize = Precedence.Assignment < settings.precedence,\n            allowIn      = settings.allowIn || parenthesize;\n\n        if (parenthesize)\n            _.js += '(';\n\n        ExprGen[$left.type]($left, Preset.e17(allowIn));\n        _.js += _.optSpace + $expr.operator + _.optSpace;\n        ExprGen[$right.type]($right, Preset.e18(allowIn));\n\n        if (parenthesize)\n            _.js += ')';\n    },\n\n    AssignmentPattern: function generateAssignmentPattern ($node) {\n        var $fakeAssign = {\n            left:     $node.left,\n            right:    $node.right,\n            operator: '='\n        };\n\n        ExprGen.AssignmentExpression($fakeAssign, Preset.e4);\n    },\n\n    ArrowFunctionExpression: function generateArrowFunctionExpression ($expr, settings) {\n        var parenthesize = Precedence.ArrowFunction < settings.precedence;\n\n        if (parenthesize)\n            _.js += '(';\n\n        if ($expr.async)\n            _.js += 'async ';\n\n        generateFunctionBody($expr);\n\n        if (parenthesize)\n            _.js += ')';\n    },\n\n    AwaitExpression: function generateAwaitExpression ($expr, settings) {\n        var parenthesize = Precedence.Await < settings.precedence;\n\n        if (parenthesize)\n            _.js += '(';\n\n        _.js += $expr.all ? 'await* ' : 'await ';\n\n        ExprGen[$expr.argument.type]($expr.argument, Preset.e20);\n\n        if (parenthesize)\n            _.js += ')';\n    },\n\n    ConditionalExpression: function generateConditionalExpression ($expr, settings) {\n        var $test             = $expr.test,\n            $conseq           = $expr.consequent,\n            $alt              = $expr.alternate,\n            parenthesize      = Precedence.Conditional < settings.precedence,\n            allowIn           = settings.allowIn || parenthesize,\n            testGenSettings   = Preset.e2(allowIn),\n            branchGenSettings = Preset.e1(allowIn);\n\n        if (parenthesize)\n            _.js += '(';\n\n        ExprGen[$test.type]($test, testGenSettings);\n        _.js += _.optSpace + '?' + _.optSpace;\n        ExprGen[$conseq.type]($conseq, branchGenSettings);\n        _.js += _.optSpace + ':' + _.optSpace;\n        ExprGen[$alt.type]($alt, branchGenSettings);\n\n        if (parenthesize)\n            _.js += ')';\n    },\n\n    LogicalExpression: generateLogicalOrBinaryExpression,\n\n    BinaryExpression: generateLogicalOrBinaryExpression,\n\n    CallExpression: function generateCallExpression ($expr, settings) {\n        var $callee      = $expr.callee,\n            $args        = $expr['arguments'],\n            argCount     = $args.length,\n            lastArgIdx   = argCount - 1,\n            parenthesize = !settings.allowCall || Precedence.Call < settings.precedence;\n\n        if (parenthesize)\n            _.js += '(';\n\n        ExprGen[$callee.type]($callee, Preset.e3);\n\n        if ($expr.optional)\n            _.js += '?.';\n\n        _.js += '(';\n\n        for (var i = 0; i < argCount; ++i) {\n            var $arg = $args[i];\n\n            ExprGen[$arg.type]($arg, Preset.e4);\n\n            if (i !== lastArgIdx)\n                _.js += ',' + _.optSpace;\n        }\n\n        _.js += ')';\n\n        if (parenthesize)\n            _.js += ')';\n    },\n\n    NewExpression: function generateNewExpression ($expr, settings) {\n        var $args        = $expr['arguments'],\n            parenthesize = Precedence.New < settings.precedence,\n            argCount     = $args.length,\n            lastArgIdx   = argCount - 1,\n            withCall     = !settings.allowUnparenthesizedNew || parentheses || argCount > 0,\n            calleeJs     = exprToJs($expr.callee, Preset.e6(!withCall));\n\n        if (parenthesize)\n            _.js += '(';\n\n        _.js += join('new', calleeJs);\n\n        if (withCall) {\n            _.js += '(';\n\n            for (var i = 0; i < argCount; ++i) {\n                var $arg = $args[i];\n\n                ExprGen[$arg.type]($arg, Preset.e4);\n\n                if (i !== lastArgIdx)\n                    _.js += ',' + _.optSpace;\n            }\n\n            _.js += ')';\n        }\n\n        if (parenthesize)\n            _.js += ')';\n    },\n\n    MemberExpression: function generateMemberExpression ($expr, settings) {\n        var $obj         = $expr.object,\n            $prop        = $expr.property,\n            parenthesize = Precedence.Member < settings.precedence,\n            isNumObj     = !$expr.computed && $obj.type === Syntax.Literal && typeof $obj.value === 'number';\n\n        if (parenthesize)\n            _.js += '(';\n\n        if (isNumObj) {\n\n            //NOTE: When the following conditions are all true:\n            //   1. No floating point\n            //   2. Don't have exponents\n            //   3. The last character is a decimal digit\n            //   4. Not hexadecimal OR octal number literal\n            // then we should add a floating point.\n\n            var numJs     = exprToJs($obj, Preset.e11(settings.allowCall)),\n                withPoint = LAST_DECIMAL_DIGIT_REGEXP.test(numJs) && !FLOATING_OR_OCTAL_REGEXP.test(numJs);\n\n            _.js += withPoint ? (numJs + '.') : numJs;\n        }\n\n        else\n            ExprGen[$obj.type]($obj, Preset.e11(settings.allowCall));\n\n        if ($expr.computed) {\n            if ($expr.optional)\n                _.js += '?.';\n\n            _.js += '[';\n            ExprGen[$prop.type]($prop, Preset.e15(settings.allowCall));\n            _.js += ']';\n        }\n\n        else {\n            const prefix        = $prop.type === Syntax.PrivateIdentifier ? '#' : '';\n            const chainOperator = $expr.optional ? '?.' : '.';\n            const propName      = prefix + $prop.name;\n            \n            _.js += chainOperator + propName;\n        }\n\n        if (parenthesize)\n            _.js += ')';\n    },\n\n    UnaryExpression: function generateUnaryExpression ($expr, settings) {\n        var parenthesize = Precedence.Unary < settings.precedence,\n            op           = $expr.operator,\n            argJs        = exprToJs($expr.argument, Preset.e7);\n\n        if (parenthesize)\n            _.js += '(';\n\n        //NOTE: delete, void, typeof\n        // get `typeof []`, not `typeof[]`\n        if (_.optSpace === '' || op.length > 2)\n            _.js += join(op, argJs);\n\n        else {\n            _.js += op;\n\n            //NOTE: Prevent inserting spaces between operator and argument if it is unnecessary\n            // like, `!cond`\n            var leftCp  = op.charCodeAt(op.length - 1),\n                rightCp = argJs.charCodeAt(0);\n\n            // 0x2B = '+', 0x2D =  '-'\n            if (leftCp === rightCp && (leftCp === 0x2B || leftCp === 0x2D) ||\n                isIdentifierCh(leftCp) && isIdentifierCh(rightCp)) {\n                _.js += _.space;\n            }\n\n            _.js += argJs;\n        }\n\n        if (parenthesize)\n            _.js += ')';\n    },\n\n    YieldExpression: function generateYieldExpression ($expr, settings) {\n        var $arg         = $expr.argument,\n            js           = $expr.delegate ? 'yield*' : 'yield',\n            parenthesize = Precedence.Yield < settings.precedence;\n\n        if (parenthesize)\n            _.js += '(';\n\n        if ($arg) {\n            var argJs = exprToJs($arg, Preset.e4);\n\n            js = join(js, argJs);\n        }\n\n        _.js += js;\n\n        if (parenthesize)\n            _.js += ')';\n    },\n\n    UpdateExpression: function generateUpdateExpression ($expr, settings) {\n        var $arg         = $expr.argument,\n            $op          = $expr.operator,\n            prefix       = $expr.prefix,\n            precedence   = prefix ? Precedence.Unary : Precedence.Postfix,\n            parenthesize = precedence < settings.precedence;\n\n        if (parenthesize)\n            _.js += '(';\n\n        if (prefix) {\n            _.js += $op;\n            ExprGen[$arg.type]($arg, Preset.e8);\n\n        }\n\n        else {\n            ExprGen[$arg.type]($arg, Preset.e8);\n            _.js += $op;\n        }\n\n        if (parenthesize)\n            _.js += ')';\n    },\n\n    FunctionExpression: function generateFunctionExpression ($expr) {\n        var isGenerator = !!$expr.generator;\n\n        if ($expr.async)\n            _.js += 'async ';\n\n        _.js += isGenerator ? 'function*' : 'function';\n\n        if ($expr.id) {\n            _.js += isGenerator ? _.optSpace : _.space;\n            _.js += $expr.id.name;\n        }\n        else\n            _.js += _.optSpace;\n\n        generateFunctionBody($expr);\n    },\n\n    ExportBatchSpecifier: function generateExportBatchSpecifier () {\n        _.js += '*';\n    },\n\n    ArrayPattern: generateArrayPatternOrExpression,\n\n    ArrayExpression: generateArrayPatternOrExpression,\n\n    ClassExpression: function generateClassExpression ($expr) {\n        var $id    = $expr.id,\n            $super = $expr.superClass,\n            $body  = $expr.body,\n            exprJs = 'class';\n\n        if ($id) {\n            var idJs = exprToJs($id, Preset.e9);\n\n            exprJs = join(exprJs, idJs);\n        }\n\n        if ($super) {\n            var superJs = exprToJs($super, Preset.e4);\n\n            superJs = join('extends', superJs);\n            exprJs  = join(exprJs, superJs);\n        }\n\n        _.js += exprJs + _.optSpace;\n        StmtGen[$body.type]($body, Preset.s2);\n    },\n\n    MetaProperty: function generateMetaProperty ($expr, settings) {\n        var $meta        = $expr.meta,\n            $property    = $expr.property,\n            parenthesize = Precedence.Member < settings.precedence;\n\n        if (parenthesize)\n            _.js += '(';\n\n        _.js += (typeof $meta === \"string\" ? $meta : $meta.name) +\n            '.' + (typeof $property === \"string\" ? $property : $property.name);\n\n        if (parenthesize)\n            _.js += ')';\n    },\n\n    MethodDefinition: function generateMethodDefinition ($expr) {\n        var exprJs = $expr['static'] ? 'static' + _.optSpace : '',\n            keyJs  = exprToJs($expr.key, Preset.e5);\n\n        if ($expr.computed)\n            keyJs = '[' + keyJs + ']';\n\n        if ($expr.kind === 'get' || $expr.kind === 'set') {\n            keyJs = join($expr.kind, keyJs);\n            _.js += join(exprJs, keyJs);\n        }\n\n        else {\n            if ($expr.value.generator)\n                _.js += exprJs + '*' + keyJs;\n            else if ($expr.value.async)\n                _.js += exprJs + 'async ' + keyJs;\n            else\n                _.js += join(exprJs, keyJs);\n        }\n\n        generateFunctionBody($expr.value);\n    },\n\n    Property: function generateProperty ($expr) {\n        var $val  = $expr.value,\n            $kind = $expr.kind,\n            keyJs = exprToJs($expr.key, Preset.e4);\n\n        if ($expr.computed)\n            keyJs = '[' + keyJs + ']';\n\n        if ($kind === 'get' || $kind === 'set') {\n            _.js += $kind + _.space + keyJs;\n            generateFunctionBody($val);\n        }\n\n        else {\n            if ($expr.shorthand)\n                _.js += keyJs;\n\n            else if ($expr.method) {\n                if ($val.generator)\n                    keyJs = '*' + keyJs;\n                else if ($val.async)\n                    keyJs = 'async ' + keyJs;\n\n                _.js += keyJs;\n                generateFunctionBody($val)\n            }\n\n            else {\n                _.js += keyJs + ':' + _.optSpace;\n                ExprGen[$val.type]($val, Preset.e4);\n            }\n        }\n    },\n\n    PropertyDefinition: function generatePropertyDefinition ($expr) {\n        var $val   = $expr.value,\n            exprJs = $expr['static'] ? 'static' + _.optSpace : '',\n            keyJs  = exprToJs($expr.key, Preset.e4);\n\n        if ($expr.computed)\n            keyJs = '[' + keyJs + ']';\n\n        if ($val) {\n            _.js += exprJs + keyJs + '=' + _.optSpace;\n    \n            ExprGen[$val.type]($val, Preset.e4);\n        }\n        else\n            _.js += exprJs + keyJs + _.optSpace;\n\n\n        if (semicolons || !settings.semicolonOptional)\n            _.js += ';';\n    },\n\n    ObjectExpression: function generateObjectExpression ($expr) {\n        var $props    = $expr.properties,\n            propCount = $props.length;\n\n        if (propCount) {\n            var lastPropIdx = propCount - 1,\n                prevIndent  = shiftIndent();\n\n            _.js += '{';\n\n            for (var i = 0; i < propCount; i++) {\n                var $prop    = $props[i],\n                    propType = $prop.type || Syntax.Property;\n\n                _.js += _.newline + _.indent;\n                ExprGen[propType]($prop, Preset.e5);\n\n                if (i !== lastPropIdx)\n                    _.js += ',';\n            }\n\n            _.indent = prevIndent;\n            _.js += _.newline + _.indent + '}';\n        }\n\n        else\n            _.js += '{}';\n    },\n\n    ObjectPattern: function generateObjectPattern ($expr) {\n        var $props    = $expr.properties,\n            propCount = $props.length;\n\n        if (propCount) {\n            var lastPropIdx = propCount - 1,\n                multiline   = false;\n\n            if (propCount === 1)\n                multiline = $props[0].value.type !== Syntax.Identifier;\n\n            else {\n                for (var i = 0; i < propCount; i++) {\n                    if (!$props[i].shorthand) {\n                        multiline = true;\n                        break;\n                    }\n                }\n            }\n\n            _.js += multiline ? ('{' + _.newline) : '{';\n\n            var prevIndent = shiftIndent(),\n                propSuffix = ',' + (multiline ? _.newline : _.optSpace);\n\n            for (var i = 0; i < propCount; i++) {\n                var $prop = $props[i];\n\n                if (multiline)\n                    _.js += _.indent;\n\n                ExprGen[$prop.type]($prop, Preset.e5);\n\n                if (i !== lastPropIdx)\n                    _.js += propSuffix;\n            }\n\n            _.indent = prevIndent;\n            _.js += multiline ? (_.newline + _.indent + '}') : '}';\n        }\n        else\n            _.js += '{}';\n    },\n\n    ThisExpression: function generateThisExpression () {\n        _.js += 'this';\n    },\n\n    Identifier: function generateIdentifier ($expr, precedence, flag) {\n        _.js += $expr.name;\n    },\n\n    PrivateIdentifier: function generatePrivateIdentifier ($expr, precedence, flag) {\n        _.js += '#' + $expr.name;\n    },\n\n    ImportExpression: function generateImportExpression ($expr, settings) {\n        var parenthesize = Precedence.Call < settings.precedence;\n        var $source      = $expr.source;\n\n        if (parenthesize)\n            _.js += '(';\n\n        _.js += 'import(';\n\n        ExprGen[$source.type]($source, Preset.e4);\n\n        _.js += ')';\n\n        if (parenthesize)\n            _.js += ')';\n    },\n\n    ImportSpecifier: function generateImportSpecifier ($expr) {\n        _.js += $expr.imported.name;\n\n        if ($expr.local)\n            _.js += _.space + 'as' + _.space + $expr.local.name;\n    },\n\n    ExportSpecifier: function generateImportOrExportSpecifier ($expr) {\n        _.js += $expr.local.name;\n\n        if ($expr.exported)\n            _.js += _.space + 'as' + _.space + $expr.exported.name;\n    },\n\n    ChainExpression: function generateChainExpression ($expr, settings) {\n        var parenthesize = Precedence.OptionalChaining < settings.precedence;\n        var $expression  = $expr.expression;\n\n        settings = settings || {};\n\n        var newSettings  = {\n            precedence: Precedence.OptionalChaining,\n            allowIn:    settings.allowIn ,\n            allowCall:  settings.allowCall,\n\n            allowUnparenthesizedNew: settings.allowUnparenthesizedNew\n        }\n\n        if (parenthesize) {\n            newSettings.allowCall = true;\n            _.js += '(';\n        }\n\n        ExprGen[$expression.type]($expression, newSettings);\n\n        if (parenthesize)\n            _.js += ')';\n    },\n\n    Literal: function generateLiteral ($expr) {\n        if (extra.raw && $expr.raw !== void 0)\n            _.js += $expr.raw;\n\n        else if ($expr.value === null)\n            _.js += 'null';\n\n        else {\n            var valueType = typeof $expr.value;\n\n            if (valueType === 'string')\n                _.js += escapeString($expr.value);\n\n            else if (valueType === 'number')\n                _.js += generateNumber($expr.value);\n\n            else if (valueType === 'boolean')\n                _.js += $expr.value ? 'true' : 'false';\n\n            else\n                _.js += generateRegExp($expr.value);\n        }\n    },\n\n    GeneratorExpression: generateGeneratorOrComprehensionExpression,\n\n    ComprehensionExpression: generateGeneratorOrComprehensionExpression,\n\n    ComprehensionBlock: function generateComprehensionBlock ($expr) {\n        var $left   = $expr.left,\n            leftJs  = void 0,\n            rightJs = exprToJs($expr.right, Preset.e5);\n\n        if ($left.type === Syntax.VariableDeclaration)\n            leftJs = $left.kind + _.space + stmtToJs($left.declarations[0], Preset.s6);\n\n        else\n            leftJs = exprToJs($left, Preset.e10);\n\n        leftJs = join(leftJs, $expr.of ? 'of' : 'in');\n\n        _.js += 'for' + _.optSpace + '(' + join(leftJs, rightJs) + ')';\n    },\n\n    RestElement: function generateRestElement ($node) {\n        _.js += '...' + $node.argument.name;\n    },\n\n    SpreadElement: function generateSpreadElement ($expr) {\n        var $arg = $expr.argument;\n\n        _.js += '...';\n        ExprGen[$arg.type]($arg, Preset.e4);\n    },\n\n    TaggedTemplateExpression: function generateTaggedTemplateExpression ($expr, settings) {\n        var $tag         = $expr.tag,\n            $quasi       = $expr.quasi,\n            parenthesize = Precedence.TaggedTemplate < settings.precedence;\n\n        if (parenthesize)\n            _.js += '(';\n\n        ExprGen[$tag.type]($tag, Preset.e11(settings.allowCall));\n        ExprGen[$quasi.type]($quasi, Preset.e12);\n\n        if (parenthesize)\n            _.js += ')';\n    },\n\n    TemplateElement: function generateTemplateElement ($expr) {\n        //NOTE: Don't use \"cooked\". Since tagged template can use raw template\n        // representation. So if we do so, it breaks the script semantics.\n        _.js += $expr.value.raw;\n    },\n\n    TemplateLiteral: function generateTemplateLiteral ($expr) {\n        var $quasis      = $expr.quasis,\n            $childExprs  = $expr.expressions,\n            quasiCount   = $quasis.length,\n            lastQuasiIdx = quasiCount - 1;\n\n        _.js += '`';\n\n        for (var i = 0; i < quasiCount; ++i) {\n            var $quasi = $quasis[i];\n\n            ExprGen[$quasi.type]($quasi, Preset.e13);\n\n            if (i !== lastQuasiIdx) {\n                var $childExpr = $childExprs[i];\n\n                _.js += '${' + _.optSpace;\n                ExprGen[$childExpr.type]($childExpr, Preset.e5);\n                _.js += _.optSpace + '}';\n            }\n        }\n\n        _.js += '`';\n    },\n\n    StaticBlock: function generateStaticBlock ($expr) {\n        var $body     = $expr.body,\n            bodyCount = $body.length;\n\n        _.js += 'static ';\n        _.js += '{' + _.newline;\n\n        for (var i = 0; i < bodyCount; ++i) {\n            StmtGen[$body[i].type]($body[i], Preset.e5);\n        }\n\n        _.js += _.newline + _.indent + '}';\n    },\n\n    Super: function generateSuper () {\n        _.js += 'super';\n    }\n};\n\n\n//-------------------------------------------------===------------------------------------------------------\n//                                              Statements\n//-------------------------------------------------===------------------------------------------------------\n\n\n//Regular expressions\nvar EXPR_STMT_UNALLOWED_EXPR_REGEXP = /^{|^class(?:\\s|{)|^(async )?function(?:\\s|\\*|\\()/;\n\n\n//Common statement generators\nfunction generateTryStatementHandlers (stmtJs, $finalizer, handlers) {\n    var handlerCount   = handlers.length,\n        lastHandlerIdx = handlerCount - 1;\n\n    for (var i = 0; i < handlerCount; ++i) {\n        var handlerJs = stmtToJs(handlers[i], Preset.s7);\n\n        stmtJs = join(stmtJs, handlerJs);\n\n        if ($finalizer || i !== lastHandlerIdx)\n            stmtJs += adoptionSuffix(handlers[i].body);\n    }\n\n    return stmtJs;\n}\n\nfunction generateForStatementIterator ($op, $stmt, settings) {\n    var $body                 = $stmt.body,\n        $left                 = $stmt.left,\n        bodySemicolonOptional = !semicolons && settings.semicolonOptional,\n        prevIndent1           = shiftIndent(),\n        awaitStr              = $stmt.await ? ' await' : '',\n        stmtJs                = 'for' + awaitStr + _.optSpace + '(';\n\n    if ($left.type === Syntax.VariableDeclaration) {\n        var prevIndent2 = shiftIndent();\n\n        stmtJs += $left.kind + _.space + stmtToJs($left.declarations[0], Preset.s6);\n        _.indent = prevIndent2;\n    }\n\n    else\n        stmtJs += exprToJs($left, Preset.e10);\n\n    stmtJs = join(stmtJs, $op);\n\n    var rightJs = exprToJs($stmt.right, Preset.e4);\n\n    stmtJs = join(stmtJs, rightJs) + ')';\n\n    _.indent = prevIndent1;\n\n    _.js += stmtJs + adoptionPrefix($body);\n    StmtGen[$body.type]($body, Preset.s4(bodySemicolonOptional));\n}\n\n\n//Statement generator dictionary\nvar StmtRawGen = {\n    BlockStatement: function generateBlockStatement ($stmt, settings) {\n        var $body      = $stmt.body,\n            len        = $body.length,\n            lastIdx    = len - 1,\n            prevIndent = shiftIndent();\n\n        _.js += '{' + _.newline;\n\n        for (var i = 0; i < len; i++) {\n            var $item = $body[i];\n\n            _.js += _.indent;\n            StmtGen[$item.type]($item, Preset.s1(settings.functionBody, i === lastIdx));\n            _.js += _.newline;\n        }\n\n        _.indent = prevIndent;\n        _.js += _.indent + '}';\n    },\n\n    BreakStatement: function generateBreakStatement ($stmt, settings) {\n        if ($stmt.label)\n            _.js += 'break ' + $stmt.label.name;\n\n        else\n            _.js += 'break';\n\n        if (semicolons || !settings.semicolonOptional)\n            _.js += ';';\n    },\n\n    ContinueStatement: function generateContinueStatement ($stmt, settings) {\n        if ($stmt.label)\n            _.js += 'continue ' + $stmt.label.name;\n\n        else\n            _.js += 'continue';\n\n        if (semicolons || !settings.semicolonOptional)\n            _.js += ';';\n    },\n\n    ClassBody: function generateClassBody ($stmt) {\n        var $body       = $stmt.body,\n            itemCount   = $body.length,\n            lastItemIdx = itemCount - 1,\n            prevIndent  = shiftIndent();\n\n        _.js += '{' + _.newline;\n\n        for (var i = 0; i < itemCount; i++) {\n            var $item    = $body[i],\n                itemType = $item.type || Syntax.Property;\n\n            _.js += _.indent;\n            ExprGen[itemType]($item, Preset.e5);\n\n            if (i !== lastItemIdx)\n                _.js += _.newline;\n        }\n\n        _.indent = prevIndent;\n        _.js += _.newline + _.indent + '}';\n    },\n\n    ClassDeclaration: function generateClassDeclaration ($stmt) {\n        var $body  = $stmt.body,\n            $super = $stmt.superClass,\n            js     = 'class ' + $stmt.id.name;\n\n        if ($super) {\n            var superJs = exprToJs($super, Preset.e4);\n\n            js += _.space + join('extends', superJs);\n        }\n\n        _.js += js + _.optSpace;\n        StmtGen[$body.type]($body, Preset.s2);\n    },\n\n    DirectiveStatement: function generateDirectiveStatement ($stmt, settings) {\n        if (extra.raw && $stmt.raw)\n            _.js += $stmt.raw;\n\n        else\n            _.js += escapeDirective($stmt.directive);\n\n        if (semicolons || !settings.semicolonOptional)\n            _.js += ';';\n    },\n\n    DoWhileStatement: function generateDoWhileStatement ($stmt, settings) {\n        var $body  = $stmt.body,\n            $test  = $stmt.test,\n            bodyJs = adoptionPrefix($body) +\n                     stmtToJs($body, Preset.s7) +\n                     adoptionSuffix($body);\n\n        //NOTE: Because `do 42 while (cond)` is Syntax Error. We need semicolon.\n        var stmtJs = join('do', bodyJs);\n\n        _.js += join(stmtJs, 'while' + _.optSpace + '(');\n        ExprGen[$test.type]($test, Preset.e5);\n        _.js += ')';\n\n        if (semicolons || !settings.semicolonOptional)\n            _.js += ';';\n    },\n\n    CatchClause: function generateCatchClause ($stmt) {\n        var $param     = $stmt.param,\n            $guard     = $stmt.guard,\n            $body      = $stmt.body,\n            prevIndent = shiftIndent();\n\n        _.js += 'catch' + _.optSpace;\n\n        if ($param) {\n           _.js += '(';\n           ExprGen[$param.type]($param, Preset.e5);\n        }\n\n        if ($guard) {\n            _.js += ' if ';\n            ExprGen[$guard.type]($guard, Preset.e5);\n        }\n\n        _.indent = prevIndent;\n        if ($param) {\n           _.js += ')';\n        }\n\n        _.js += adoptionPrefix($body);\n        StmtGen[$body.type]($body, Preset.s7);\n    },\n\n    DebuggerStatement: function generateDebuggerStatement ($stmt, settings) {\n        _.js += 'debugger';\n\n        if (semicolons || !settings.semicolonOptional)\n            _.js += ';';\n    },\n\n    EmptyStatement: function generateEmptyStatement () {\n        _.js += ';';\n    },\n\n    ExportAllDeclaration: function ($stmt, settings) {\n        StmtRawGen.ExportDeclaration($stmt, settings, true);\n    },\n\n    ExportDeclaration: function generateExportDeclaration ($stmt, settings, exportAll) {\n        var $specs        = $stmt.specifiers,\n            $decl         = $stmt.declaration,\n            withSemicolon = semicolons || !settings.semicolonOptional;\n\n        // export default AssignmentExpression[In] ;\n        if ($stmt['default']) {\n            var declJs = exprToJs($decl, Preset.e4);\n\n            _.js += join('export default', declJs);\n\n            if (withSemicolon)\n                _.js += ';';\n        }\n\n        // export * FromClause ;\n        // export ExportClause[NoReference] FromClause ;\n        // export ExportClause ;\n        else if ($specs || exportAll) {\n            var stmtJs = 'export';\n\n            if (exportAll)\n                stmtJs += _.optSpace + '*';\n\n            else if ($specs.length === 0)\n                stmtJs += _.optSpace + '{' + _.optSpace + '}';\n\n            else if ($specs[0].type === Syntax.ExportBatchSpecifier) {\n                var specJs = exprToJs($specs[0], Preset.e5);\n\n                stmtJs = join(stmtJs, specJs);\n            }\n\n            else {\n                var prevIndent  = shiftIndent(),\n                    specCount   = $specs.length,\n                    lastSpecIdx = specCount - 1;\n\n                stmtJs += _.optSpace + '{';\n\n                for (var i = 0; i < specCount; ++i) {\n                    stmtJs += _.newline + _.indent;\n                    stmtJs += exprToJs($specs[i], Preset.e5);\n\n                    if (i !== lastSpecIdx)\n                        stmtJs += ',';\n                }\n\n                _.indent = prevIndent;\n                stmtJs += _.newline + _.indent + '}';\n            }\n\n            if ($stmt.source) {\n                _.js += join(stmtJs, 'from' + _.optSpace);\n                ExprGen.Literal($stmt.source);\n            }\n\n            else\n                _.js += stmtJs;\n\n            if (withSemicolon)\n                _.js += ';';\n        }\n\n        // export VariableStatement\n        // export Declaration[Default]\n        else if ($decl) {\n            var declJs = stmtToJs($decl, Preset.s4(!withSemicolon));\n\n            _.js += join('export', declJs);\n        }\n    },\n\n    ExportNamedDeclaration: function ($stmt, settings) {\n        StmtRawGen.ExportDeclaration($stmt, settings);\n    },\n\n    ExpressionStatement: function generateExpressionStatement ($stmt, settings) {\n        var exprJs       = exprToJs($stmt.expression, Preset.e5),\n            parenthesize = EXPR_STMT_UNALLOWED_EXPR_REGEXP.test(exprJs) ||\n                           (directive &&\n                            settings.directiveContext &&\n                            $stmt.expression.type === Syntax.Literal &&\n                            typeof $stmt.expression.value === 'string');\n\n        //NOTE: '{', 'function', 'class' are not allowed in expression statement.\n        // Therefore, they should be parenthesized.\n        if (parenthesize)\n            _.js += '(' + exprJs + ')';\n\n        else\n            _.js += exprJs;\n\n        if (semicolons || !settings.semicolonOptional)\n            _.js += ';';\n    },\n\n    ImportDeclaration: function generateImportDeclaration ($stmt, settings) {\n        var $specs    = $stmt.specifiers,\n            stmtJs    = 'import',\n            specCount = $specs.length;\n\n        //NOTE: If no ImportClause is present,\n        // this should be `import ModuleSpecifier` so skip `from`\n        // ModuleSpecifier is StringLiteral.\n        if (specCount) {\n            var hasBinding    = !!$specs[0]['default'],\n                firstNamedIdx = hasBinding ? 1 : 0,\n                lastSpecIdx   = specCount - 1;\n\n            // ImportedBinding\n            if (hasBinding)\n                stmtJs = join(stmtJs, $specs[0].id.name);\n\n            // NamedImports\n            if (firstNamedIdx < specCount) {\n                if (hasBinding)\n                    stmtJs += ',';\n\n                stmtJs += _.optSpace + '{';\n\n                // import { ... } from \"...\";\n                if (firstNamedIdx === lastSpecIdx)\n                    stmtJs += _.optSpace + exprToJs($specs[firstNamedIdx], Preset.e5) + _.optSpace;\n\n                else {\n                    var prevIndent = shiftIndent();\n\n                    // import {\n                    //    ...,\n                    //    ...,\n                    // } from \"...\";\n                    for (var i = firstNamedIdx; i < specCount; i++) {\n                        stmtJs += _.newline + _.indent + exprToJs($specs[i], Preset.e5);\n\n                        if (i !== lastSpecIdx)\n                            stmtJs += ',';\n                    }\n\n                    _.indent = prevIndent;\n                    stmtJs += _.newline + _.indent;\n                }\n\n                stmtJs += '}' + _.optSpace;\n            }\n\n            stmtJs = join(stmtJs, 'from')\n        }\n\n        _.js += stmtJs + _.optSpace;\n        ExprGen.Literal($stmt.source);\n\n        if (semicolons || !settings.semicolonOptional)\n            _.js += ';';\n    },\n\n    VariableDeclarator: function generateVariableDeclarator ($stmt, settings) {\n        var $id         = $stmt.id,\n            $init       = $stmt.init,\n            genSettings = Preset.e1(settings.allowIn);\n\n        if ($init) {\n            ExprGen[$id.type]($id, genSettings);\n            _.js += _.optSpace + '=' + _.optSpace;\n            ExprGen[$init.type]($init, genSettings, $stmt);\n        }\n\n        else {\n            if ($id.type === Syntax.Identifier)\n                _.js += $id.name;\n\n            else\n                ExprGen[$id.type]($id, genSettings);\n        }\n    },\n\n    VariableDeclaration: function generateVariableDeclaration ($stmt, settings) {\n        var $decls          = $stmt.declarations,\n            len             = $decls.length,\n            prevIndent      = len > 1 ? shiftIndent() : _.indent,\n            declGenSettings = Preset.s3(settings.allowIn);\n\n        _.js += $stmt.kind;\n\n        for (var i = 0; i < len; i++) {\n            var $decl = $decls[i];\n\n            _.js += i === 0 ? _.space : (',' + _.optSpace);\n            StmtGen[$decl.type]($decl, declGenSettings);\n        }\n\n        if (semicolons || !settings.semicolonOptional)\n            _.js += ';';\n\n        _.indent = prevIndent;\n    },\n\n    ThrowStatement: function generateThrowStatement ($stmt, settings) {\n        var argJs = exprToJs($stmt.argument, Preset.e5);\n\n        _.js += join('throw', argJs);\n\n        if (semicolons || !settings.semicolonOptional)\n            _.js += ';';\n    },\n\n    TryStatement: function generateTryStatement ($stmt) {\n        var $block     = $stmt.block,\n            $finalizer = $stmt.finalizer,\n            stmtJs     = 'try' +\n                         adoptionPrefix($block) +\n                         stmtToJs($block, Preset.s7) +\n                         adoptionSuffix($block);\n\n        var $handlers = $stmt.handlers || $stmt.guardedHandlers;\n\n        if ($handlers)\n            stmtJs = generateTryStatementHandlers(stmtJs, $finalizer, $handlers);\n\n        if ($stmt.handler) {\n            $handlers = isArray($stmt.handler) ? $stmt.handler : [$stmt.handler];\n            stmtJs    = generateTryStatementHandlers(stmtJs, $finalizer, $handlers);\n        }\n\n        if ($finalizer) {\n            stmtJs = join(stmtJs, 'finally' + adoptionPrefix($finalizer));\n            stmtJs += stmtToJs($finalizer, Preset.s7);\n        }\n\n        _.js += stmtJs;\n    },\n\n    SwitchStatement: function generateSwitchStatement ($stmt) {\n        var $cases     = $stmt.cases,\n            $discr     = $stmt.discriminant,\n            prevIndent = shiftIndent();\n\n        _.js += 'switch' + _.optSpace + '(';\n        ExprGen[$discr.type]($discr, Preset.e5);\n        _.js += ')' + _.optSpace + '{' + _.newline;\n        _.indent = prevIndent;\n\n        if ($cases) {\n            var caseCount   = $cases.length,\n                lastCaseIdx = caseCount - 1;\n\n            for (var i = 0; i < caseCount; i++) {\n                var $case = $cases[i];\n\n                _.js += _.indent;\n                StmtGen[$case.type]($case, Preset.s4(i === lastCaseIdx));\n                _.js += _.newline;\n            }\n        }\n\n        _.js += _.indent + '}';\n    },\n\n    SwitchCase: function generateSwitchCase ($stmt, settings) {\n        var $conseqs                = $stmt.consequent,\n            $firstConseq            = $conseqs[0],\n            $test                   = $stmt.test,\n            i                       = 0,\n            conseqSemicolonOptional = !semicolons && settings.semicolonOptional,\n            conseqCount             = $conseqs.length,\n            lastConseqIdx           = conseqCount - 1,\n            prevIndent              = shiftIndent();\n\n        if ($test) {\n            var testJs = exprToJs($test, Preset.e5);\n\n            _.js += join('case', testJs) + ':';\n        }\n\n        else\n            _.js += 'default:';\n\n\n        if (conseqCount && $firstConseq.type === Syntax.BlockStatement) {\n            i++;\n            _.js += adoptionPrefix($firstConseq);\n            StmtGen[$firstConseq.type]($firstConseq, Preset.s7);\n        }\n\n        for (; i < conseqCount; i++) {\n            var $conseq           = $conseqs[i],\n                semicolonOptional = i === lastConseqIdx && conseqSemicolonOptional;\n\n            _.js += _.newline + _.indent;\n            StmtGen[$conseq.type]($conseq, Preset.s4(semicolonOptional));\n        }\n\n        _.indent = prevIndent;\n    },\n\n    IfStatement: function generateIfStatement ($stmt, settings) {\n        var $conseq           = $stmt.consequent,\n            $test             = $stmt.test,\n            prevIndent        = shiftIndent(),\n            semicolonOptional = !semicolons && settings.semicolonOptional;\n\n        _.js += 'if' + _.optSpace + '(';\n        ExprGen[$test.type]($test, Preset.e5);\n        _.js += ')';\n        _.indent = prevIndent;\n        _.js += adoptionPrefix($conseq);\n\n        if ($stmt.alternate) {\n            var conseq = stmtToJs($conseq, Preset.s7) + adoptionSuffix($conseq),\n                alt    = stmtToJs($stmt.alternate, Preset.s4(semicolonOptional));\n\n            if ($stmt.alternate.type === Syntax.IfStatement)\n                alt = 'else ' + alt;\n\n            else\n                alt = join('else', adoptionPrefix($stmt.alternate) + alt);\n\n            _.js += join(conseq, alt);\n        }\n\n        else\n            StmtGen[$conseq.type]($conseq, Preset.s4(semicolonOptional));\n    },\n\n    ForStatement: function generateForStatement ($stmt, settings) {\n        var $init                 = $stmt.init,\n            $test                 = $stmt.test,\n            $body                 = $stmt.body,\n            $update               = $stmt.update,\n            bodySemicolonOptional = !semicolons && settings.semicolonOptional,\n            prevIndent            = shiftIndent();\n\n        _.js += 'for' + _.optSpace + '(';\n\n        if ($init) {\n            if ($init.type === Syntax.VariableDeclaration)\n                StmtGen[$init.type]($init, Preset.s6);\n\n            else {\n                ExprGen[$init.type]($init, Preset.e14);\n                _.js += ';';\n            }\n        }\n\n        else\n            _.js += ';';\n\n        if ($test) {\n            _.js += _.optSpace;\n            ExprGen[$test.type]($test, Preset.e5);\n        }\n\n        _.js += ';';\n\n        if ($update) {\n            _.js += _.optSpace;\n            ExprGen[$update.type]($update, Preset.e5);\n        }\n\n        _.js += ')';\n        _.indent = prevIndent;\n        _.js += adoptionPrefix($body);\n        StmtGen[$body.type]($body, Preset.s4(bodySemicolonOptional));\n    },\n\n    ForInStatement: function generateForInStatement ($stmt, settings) {\n        generateForStatementIterator('in', $stmt, settings);\n    },\n\n    ForOfStatement: function generateForOfStatement ($stmt, settings) {\n        generateForStatementIterator('of', $stmt, settings);\n    },\n\n    LabeledStatement: function generateLabeledStatement ($stmt, settings) {\n        var $body                 = $stmt.body,\n            bodySemicolonOptional = !semicolons && settings.semicolonOptional,\n            prevIndent            = _.indent;\n\n        _.js += $stmt.label.name + ':' + adoptionPrefix($body);\n\n        if ($body.type !== Syntax.BlockStatement)\n            prevIndent = shiftIndent();\n\n        StmtGen[$body.type]($body, Preset.s4(bodySemicolonOptional));\n        _.indent       = prevIndent;\n    },\n\n    ModuleDeclaration: function generateModuleDeclaration ($stmt, settings) {\n        _.js += 'module' + _.space + $stmt.id.name + _.space + 'from' + _.optSpace;\n\n        ExprGen.Literal($stmt.source);\n\n        if (semicolons || !settings.semicolonOptional)\n            _.js += ';';\n    },\n\n    Program: function generateProgram ($stmt) {\n        var $body   = $stmt.body,\n            len     = $body.length,\n            lastIdx = len - 1;\n\n        if (safeConcatenation && len > 0)\n            _.js += '\\n';\n\n        for (var i = 0; i < len; i++) {\n            var $item = $body[i];\n\n            _.js += _.indent;\n            StmtGen[$item.type]($item, Preset.s5(!safeConcatenation && i === lastIdx));\n\n            if (i !== lastIdx)\n                _.js += _.newline;\n        }\n    },\n\n    FunctionDeclaration: function generateFunctionDeclaration ($stmt) {\n        var isGenerator = !!$stmt.generator;\n\n        if ($stmt.async)\n            _.js += 'async ';\n\n        _.js += isGenerator ? ('function*' + _.optSpace) : ('function' + _.space );\n        _.js += $stmt.id.name;\n        generateFunctionBody($stmt);\n    },\n\n    ReturnStatement: function generateReturnStatement ($stmt, settings) {\n        var $arg = $stmt.argument;\n\n        if ($arg) {\n            var argJs = exprToJs($arg, Preset.e5);\n\n            _.js += join('return', argJs);\n        }\n\n        else\n            _.js += 'return';\n\n        if (semicolons || !settings.semicolonOptional)\n            _.js += ';';\n    },\n\n    WhileStatement: function generateWhileStatement ($stmt, settings) {\n        var $body                 = $stmt.body,\n            $test                 = $stmt.test,\n            bodySemicolonOptional = !semicolons && settings.semicolonOptional,\n            prevIndent            = shiftIndent();\n\n        _.js += 'while' + _.optSpace + '(';\n        ExprGen[$test.type]($test, Preset.e5);\n        _.js += ')';\n        _.indent = prevIndent;\n\n        _.js += adoptionPrefix($body);\n        StmtGen[$body.type]($body, Preset.s4(bodySemicolonOptional));\n    },\n\n    WithStatement: function generateWithStatement ($stmt, settings) {\n        var $body                 = $stmt.body,\n            $obj                  = $stmt.object,\n            bodySemicolonOptional = !semicolons && settings.semicolonOptional,\n            prevIndent            = shiftIndent();\n\n        _.js += 'with' + _.optSpace + '(';\n        ExprGen[$obj.type]($obj, Preset.e5);\n        _.js += ')';\n        _.indent = prevIndent;\n        _.js += adoptionPrefix($body);\n        StmtGen[$body.type]($body, Preset.s4(bodySemicolonOptional));\n    }\n};\n\nfunction generateStatement ($stmt, option) {\n    StmtGen[$stmt.type]($stmt, option);\n}\n\n//CodeGen\n//-----------------------------------------------------------------------------------\nfunction exprToJs ($expr, settings, $parent) {\n    var savedJs = _.js;\n    _.js        = '';\n\n    ExprGen[$expr.type]($expr, settings, $parent);\n\n    var src = _.js;\n    _.js    = savedJs;\n\n    return src;\n}\n\nfunction stmtToJs ($stmt, settings) {\n    var savedJs = _.js;\n    _.js        = '';\n\n    StmtGen[$stmt.type]($stmt, settings);\n\n    var src = _.js;\n    _.js    = savedJs;\n\n    return src;\n}\n\nfunction run ($node) {\n    _.js = '';\n\n    if (StmtGen[$node.type])\n        StmtGen[$node.type]($node, Preset.s7);\n\n    else\n        ExprGen[$node.type]($node, Preset.e19);\n\n    return _.js;\n}\n\nfunction wrapExprGen (gen) {\n    return function ($expr, settings) {\n        if (extra.verbatim && $expr.hasOwnProperty(extra.verbatim))\n            generateVerbatim($expr, settings);\n\n        else\n            gen($expr, settings);\n    }\n}\n\nfunction createExprGenWithExtras () {\n    var gens = {};\n\n    for (var key in ExprRawGen) {\n        if (ExprRawGen.hasOwnProperty(key))\n            gens[key] = wrapExprGen(ExprRawGen[key]);\n    }\n\n    return gens;\n}\n\n\n//Strings\nvar _ = {\n    js:         '',\n    newline:    '\\n',\n    optSpace:   ' ',\n    space:      ' ',\n    indentUnit: '    ',\n    indent:     ''\n};\n\n\n//Generators\nvar ExprGen = void 0,\n    StmtGen = StmtRawGen;\n\n\nexports.generate = function ($node, options) {\n    var defaultOptions = getDefaultOptions(), result, pair;\n\n    if (options != null) {\n        //NOTE: Obsolete options\n        //\n        //   `options.indent`\n        //   `options.base`\n        //\n        // Instead of them, we can use `option.format.indent`.\n        if (typeof options.indent === 'string') {\n            defaultOptions.format.indent.style = options.indent;\n        }\n        if (typeof options.base === 'number') {\n            defaultOptions.format.indent.base = options.base;\n        }\n        options      = updateDeeply(defaultOptions, options);\n        _.indentUnit = options.format.indent.style;\n        if (typeof options.base === 'string') {\n            _.indent = options.base;\n        }\n        else {\n            _.indent = stringRepeat(_.indentUnit, options.format.indent.base);\n        }\n    }\n    else {\n        options      = defaultOptions;\n        _.indentUnit = options.format.indent.style;\n        _.indent     = stringRepeat(_.indentUnit, options.format.indent.base);\n    }\n    json        = options.format.json;\n    renumber    = options.format.renumber;\n    hexadecimal = json ? false : options.format.hexadecimal;\n    quotes      = json ? 'double' : options.format.quotes;\n    escapeless  = options.format.escapeless;\n\n    _.newline  = options.format.newline;\n    _.optSpace = options.format.space;\n\n    if (options.format.compact)\n        _.newline = _.optSpace = _.indentUnit = _.indent = '';\n\n    _.space           = _.optSpace ? _.optSpace : ' ';\n    parentheses       = options.format.parentheses;\n    semicolons        = options.format.semicolons;\n    safeConcatenation = options.format.safeConcatenation;\n    directive         = options.directive;\n    parse             = json ? null : options.parse;\n    extra             = options;\n\n    if (extra.verbatim)\n        ExprGen = createExprGenWithExtras();\n\n    else\n        ExprGen = ExprRawGen;\n\n    return run($node);\n};\n"],
  "mappings": "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",
  "names": ["cp", "ch", "str", "num", "result", "array", "target", "override", "key", "val", "isHashObject", "value", "point", "temp", "exponent", "pos", "previousIsBackslash", "reg", "match", "flags", "i", "iz", "characterInBrack", "code", "next", "hex", "quote", "len", "singleQuotes", "doubleQuotes", "single", "l", "r", "lCp", "rCp", "prevIndent", "$stmt", "$expr", "settings", "verbatim", "strVerbatim", "precedence", "parenthesize", "content", "chunks", "chunkCount", "$node", "$params", "paramCount", "lastParamIdx", "arrowFuncWithoutParentheses", "$param", "$body", "exprJs", "allowIn", "allowUnparenthesizedNew", "allowCall", "functionBody", "semicolonOptional", "node", "parent", "$parent", "op", "operandGenSettings", "needParens", "rightJs", "$elems", "elemCount", "lastElemIdx", "multiline", "itemPrefix", "$elem", "$blocks", "$filter", "isGenerator", "bodyJs", "blockCount", "blockJs", "filterJs", "$children", "childrenCount", "lastChildIdx", "exprGenSettings", "$child", "$left", "$right", "$fakeAssign", "$test", "$conseq", "$alt", "testGenSettings", "branchGenSettings", "$callee", "$args", "argCount", "lastArgIdx", "$arg", "withCall", "calleeJs", "$obj", "$prop", "isNumObj", "numJs", "withPoint", "prefix", "chainOperator", "propName", "argJs", "leftCp", "rightCp", "js", "$op", "$id", "$super", "idJs", "superJs", "$meta", "$property", "keyJs", "$val", "$kind", "$props", "propCount", "lastPropIdx", "propType", "propSuffix", "flag", "$source", "$expression", "newSettings", "valueType", "leftJs", "$tag", "$quasi", "$quasis", "$childExprs", "quasiCount", "lastQuasiIdx", "$childExpr", "bodyCount", "stmtJs", "$finalizer", "handlers", "handlerCount", "lastHandlerIdx", "handlerJs", "bodySemicolonOptional", "prevIndent1", "awaitStr", "prevIndent2", "lastIdx", "$item", "itemCount", "lastItemIdx", "itemType", "$guard", "exportAll", "$specs", "$decl", "withSemicolon", "declJs", "specJs", "specCount", "lastSpecIdx", "hasBinding", "firstNamedIdx", "$init", "genSettings", "$decls", "declGenSettings", "$block", "$handlers", "$cases", "$discr", "caseCount", "lastCaseIdx", "$case", "$conseqs", "$firstConseq", "conseqSemicolonOptional", "conseqCount", "lastConseqIdx", "testJs", "conseq", "alt", "$update", "option", "savedJs", "src", "gen", "gens", "options", "defaultOptions", "pair"]
}
